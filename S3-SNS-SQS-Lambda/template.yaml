AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  S3, SNS, SQS, lambda app

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.9
    Tracing: Active
    CodeUri: src/
  Api:
    TracingEnabled: True

Parameters:
  MyWebhookURL:
    Type: String
    Default: https://webhook.site/bab1d946-3b3f-4577-b4d3-7a66d32c88f6
#      - Navigate to https://webhook.site
#      - Copy Your unique URL


Resources:
##############################################
########## S3 Bucket Configuration ###########
##############################################
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    DependsOn: S3ToSNSTopicPolicy
    Properties:
      AccessControl: Private
      BucketName: !Sub ${AWS::StackName}-s3bucket
      NotificationConfiguration:
        TopicConfigurations:
          - Topic: !Ref SNSTopic
            Event: s3:ObjectCreated:*
          - Event: s3:ObjectRemoved:*
            Topic: !Ref SNSTopic
#        LambdaConfigurations:
#          - Function: !GetAtt SNSLambdaFunction.Arn
#            Event: s3:ObjectCreated:*
#            Filter:
#              S3Key:
#                Rules:
#                  - Name: suffix
#                    Value: .png
##############################################
############# SNS S3 Topic Policy ############
##############################################
  S3ToSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sns:Publish
            Condition:
              ArnLike:
                aws:SourceArn: arn:aws:s3:::fan-out-app-s3bucket
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Resource: !Ref SNSTopic
            Principal:
              Service:
                - s3.amazonaws.com
      Topics:
        - !Ref SNSTopic
##############################################
############# SNS Topic ###############
##############################################
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-snstopic
##############################################
############# SNS Subscription ###############
##############################################
  WebhookSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref MyWebhookURL
      Protocol: https
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 20
          minDelayTarget: 10
          maxDelayTarget: 30
          numMinDelayRetries: 3
          numMaxDelayRetries: 17
          numNoDelayRetries: 0
          backoffFunction: exponential
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: ngwesseaws@gmail.com
      Protocol: email
      TopicArn: !Ref SNSTopic
  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SNSLambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref SNSTopic
  SQS1Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SQSQueue1.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
  SQS2Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SQSQueue2.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
  SQS3Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SQSQueue3.Arn
      Protocol: sqs
      TopicArn: !Ref SNSTopic
##############################################
########## SNS To SQS Queue Policy ###########
##############################################
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Allow SNS publish to SQS
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource: "*"
            Action: SQS:SendMessage
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:sqs:::${AWS::StackName}

      Queues:
        - !Ref SQSQueue1
        - !Ref SQSQueue2
        - !Ref SQSQueue3
##############################################
############## SQS Queue Fan-Out #############
##############################################
  SQSQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue1
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MyDeadLetterSqsQueue.Arn
        maxReceiveCount: 2

  SQSQueue2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue2
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MyDeadLetterSqsQueue.Arn
        maxReceiveCount: 2

  SQSQueue3:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-queue3
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MyDeadLetterSqsQueue.Arn
        maxReceiveCount: 2
##############################################
############### DeadLetter Queue #############
##############################################
  MyDeadLetterSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-dlqueue
##############################################
############# SNS Lambda Policy ##############
##############################################
  SNSInvokeLambdaFunction:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SNSLambdaFunction
      Principal: sns.amazonaws.com
##############################################
############### Lambda Function ##############
##############################################
  SNSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-lambda
      Handler: app.s3_sns_trigger
      Environment:
        Variables:
          MySNSTopic_Arn: !Ref SNSTopic
##############################################
############ Cloudwatch-Dashboard ############
##############################################
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardBody: !Sub |
        {
          "start": "-PT1H",
          "periodOverride": "inherit",
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Throttles", "FunctionName", "!Ref SNSLambdaFunction", "Resource", "${SNSLambdaFunction}" ],
                  [ ".", "Errors", "..." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "Sum",
                "period": 30,
                "title": "Throttles & Errors"
              }
            },
             {
              "type": "metric",
              "x": 0,
              "y": 1,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "!Ref SNSLambdaFunction", "Resource", "${SNSLambdaFunction}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "stat": "SampleCount",
                "period": 30,
                "title": "Invocations"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 2,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "BucketSizeBytes", "BucketName", "!Ref S3Bucket"]
                ],
                "region": "${AWS::Region}",
                "period": 300,
                "title": "S3 Bucket Size",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 3,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "NumberOfObjects", "BucketName", "!Ref S3Bucket"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "S3 Number of Objects",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 1,
              "y": 1,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SNS", "NumberOfMessagesPublished", "TopicName", "!Ref SNSTopic"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "SNS Messages Published",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 1,
              "y": 2,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "!Ref SQSQueue1"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "SQS queue1 Messages Visible",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 1,
              "y": 3,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "!Ref SQSQueue2"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "SQS queue2 Messages Visible",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 1,
              "y": 4,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "!Ref SQSQueue3"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "SQS queue3 Messages Visible",
                "view": "singleValue"
              }
            },
            {
              "type": "metric",
              "x": 1,
              "y": 5,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "!Ref MyDeadLetterSqsQueue"]
                ],
                "period": 300,
                "region": "${AWS::Region}",
                "title": "SQS DLQ Messages Visible",
                "view": "singleValue"
              }
            }
          ]
        }

################### Out-Put ##################
##############################################